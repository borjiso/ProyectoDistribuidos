/* Generated By:JavaCC: Do not edit this line. Calculadora.java */
import java.util.HashMap;
import java.util.Map;
        public class Calculadora implements CalculadoraConstants {
                static int dolarin = 0;//Esta variable almacenara el ultimo resultado.
                static Map<String, Integer> variables = new HashMap();//Esta tabla almacenara el valor de las variables.
                public static void main(String args[])throws ParseException{
                        Calculadora miParser = new Calculadora(System.in);
                        miParser.sesion();
                }

  static final public void sesion() throws ParseException {
               System.out.println("Calculadora$: ");
    label_1:
    while (true) {
      linea();

      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
      case DECIMAL:
      case OCTAL:
      case BINARIO:
      case ID:
      case RESTA:
      case 13:
      case 17:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
  }

  static final public void linea() throws ParseException {
              int num=0/*Definimos num y lo usamos para almacenar el resultado de la linea.*//*Se usa LOOKAHEAD para leer dos caracteres y poder usar la funcion adecuada sin tener que retroceder.*/;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECIMAL:
    case OCTAL:
    case BINARIO:
    case ID:
    case RESTA:
    case 13:
    case 17:
      if (jj_2_1(2)) {
        num = asignacion();

      } else if (jj_2_2(2)) {
        num = expresion();

      } else if (jj_2_3(2)) {
        num = condicional();

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(EOL);
               /*Y un final de linea.*/System.out.println(num+"\u005cr\u005cnCalculadora$: ");
  }

  static final public int asignacion() throws ParseException {
                  String variable; int valor;
    jj_consume_token(ID);
                     variable = token.image;/*token.image obtiene el lexema del token ID que lo utilizaremos como identificador de la variable*/
    jj_consume_token(12);
    valor = expresion();

         /*Almacenamos en la tabla de variables el valor asignado.*/
                variables.put(variable, valor);
                dolarin=valor;
                {if (true) return valor;}
    throw new Error("Missing return statement in function");
  }

  static final public int expresion() throws ParseException {
                 int sum1=0; int sum2=0;
    sum1 = termino();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUMA:
      case RESTA:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUMA:
        jj_consume_token(SUMA);
        sum2 = termino();
                                                        sum1+=sum2;
        break;
      case RESTA:
        jj_consume_token(RESTA);
        sum2 = termino();
                                                                                                                 sum1-=sum2;
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                        dolarin=sum1;
                        {if (true) return sum1;}
    throw new Error("Missing return statement in function");
  }

  static final public int termino() throws ParseException {
               int div1=0;int div2=0;
    div1 = factor();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLICACION:
      case DIVISION:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLICACION:
        jj_consume_token(MULTIPLICACION);
        div2 = factor();
                                                                 div1*=div2;
        break;
      case DIVISION:
        jj_consume_token(DIVISION);
        div2 = factor();
                                                                                                                           div1/=div2;
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                        dolarin=div1;
                        {if (true) return div1;}
    throw new Error("Missing return statement in function");
  }

  static final public int condicional() throws ParseException {
                   int izquierda, derecha, cierto, falso;boolean resul =true;
    jj_consume_token(13);
    izquierda = expresion();
    jj_consume_token(RELACIONAL);
                        String signo = token.image;
    derecha = expresion();
    jj_consume_token(14);
    if (jj_2_4(3)) {
      cierto = expresion();

    } else if (jj_2_5(3)) {
      cierto = termino();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECIMAL:
      case OCTAL:
      case BINARIO:
      case ID:
      case RESTA:
      case 13:
      case 17:
        cierto = factor();
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(15);
    if (jj_2_6(3)) {
      falso = expresion();
    } else if (jj_2_7(3)) {
      falso = termino();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECIMAL:
      case OCTAL:
      case BINARIO:
      case ID:
      case RESTA:
      case 13:
      case 17:
        falso = factor();
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                switch (signo) {
                                                                                        case "<":
                                                                                                        resul = izquierda < derecha;
                                                                                                        break;
                                                                                        case ">":
                                                                                                        resul = izquierda > derecha;
                                                                                                        break;
                                                                                        case "==":
                                                                                                        resul = izquierda == derecha;
                                                                                                        break;
                                                                                        case "!=":
                                                                                                        resul = izquierda != derecha;
                                                                                                        break;
                                                                                        case ">=":
                                                                                                        resul = izquierda >= derecha;
                                                                                                        break;
                                                                                        case "<=":
                                                                                                        resul = izquierda <= derecha;
                                                                                                        break;
                                                                                        default:
                                                                                                        break;
                                                                        }
                        dolarin=resul?cierto:falso;
                        {if (true) return dolarin;}
    throw new Error("Missing return statement in function");
  }

  static final public int factor() throws ParseException {
              int valor;int simbolo = 1; String numero;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RESTA:
      jj_consume_token(RESTA);
                 simbolo = -1;
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 13:
      jj_consume_token(13);
      valor = expresion();
      jj_consume_token(16);
      break;
    case 17:
      jj_consume_token(17);
                     {if (true) return simbolo*dolarin;}
      break;
    case ID:
      jj_consume_token(ID);
                                dolarin = variables.get(token.image);
                                {if (true) return simbolo*variables.get(token.image);}
      break;
    case DECIMAL:
    case OCTAL:
    case BINARIO:
      valor = numero();
                                dolarin = valor;
                                {if (true) return simbolo*dolarin;}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public int numero() throws ParseException {
                      String numero;int valor;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECIMAL:
      jj_consume_token(DECIMAL);
                 /*La funcion parseInt acepta un parametro radix que sirve para transformar numeros en distintas bases.*/
                        numero = token.image;
                        valor = Integer.parseInt(numero);
                        dolarin = valor;
                        {if (true) return valor;}
      break;
    case OCTAL:
      jj_consume_token(OCTAL);
                        numero = token.image;
                        valor = Integer.parseInt(numero.substring(1),8);
                        dolarin = valor;
                        {if (true) return valor;}
      break;
    case BINARIO:
      jj_consume_token(BINARIO);
                        numero = token.image;
                        valor = Integer.parseInt(numero.substring(1),2);
                        dolarin = valor;
                        {if (true) return valor;}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(17)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(13)) return true;
    if (jj_3R_5()) return true;
    if (jj_scan_token(16)) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_scan_token(13)) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_3R_9()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_10()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) return true;
    }
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(SUMA)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(RESTA)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_13()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_5() {
    if (jj_3R_7()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_8()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(DIVISION)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(BINARIO)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(OCTAL)) return true;
    return false;
  }

  static private boolean jj_3R_4() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(12)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(DECIMAL)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(MULTIPLICACION)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(RESTA)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CalculadoraTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2217c,0x22178,0x180,0x180,0x600,0x600,0x22178,0x22178,0x100,0x22078,0x38,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[7];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Calculadora(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Calculadora(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CalculadoraTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Calculadora(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CalculadoraTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Calculadora(CalculadoraTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CalculadoraTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[18];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 11; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 18; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 7; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

                /*El codigo ente llaves se utiliza para ejecutar codigo cuando se ha reconocido un patrón o se ha encontrado un token.*/
        }
